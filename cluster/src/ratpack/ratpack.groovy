import com.fasterxml.jackson.databind.ObjectMapper
import handler.ErrorHandler
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import ratpack.dropwizard.metrics.DropwizardMetricsModule
import ratpack.error.ServerErrorHandler
import ratpack.form.Form
import ratpack.groovy.template.MarkupTemplateModule
import ratpack.handling.RequestLogger
import ratpack.http.Status
import ratpack.hystrix.HystrixModule
import ratpack.jackson.Jackson
import ratpack.rx.RxRatpack
import service.AuthService
import service.Session
import service.SessionService
import service.User

import static ratpack.groovy.Groovy.ratpack
import static ratpack.jackson.Jackson.json

final Logger logger = LoggerFactory.getLogger (ratpack)

ratpack {

//    serverConfig {
//        props ("application.properties")
//    }

    bindings {

        def sentinel1 = 'sentinel1.service.imanagecloud.com:26379'
        def sentinel2 = 'sentinel2.service.imanagecloud.com:26379'
        def sentinel3 = 'sentinel3.service.imanagecloud.com:26379'
        def props = [
                'redis.uri': "redis-sentinel://${sentinel1},${sentinel2},${sentinel3}/0#redismaster",
                'app.namespace': 'stratus',
                'redis.pool.maxIdle': '50',
                'redis.pool.maxTotal': '500',
                'redis.pool.minIdle': '10',
                'redis.numReplicate': '1',
                'redis.replicateTimeoutMS': '3000'
        ]

        module MarkupTemplateModule
        module new HystrixModule ().sse ()
        module new DropwizardMetricsModule (), { it.jmx () }
        module new SessionModule (props)

        bind ServerErrorHandler, ErrorHandler
    }

    handlers {
        all RequestLogger.ncsa (logger)

        SessionService sessionService = registry.get (SessionService)
        AuthService authService = registry.get (AuthService)
        ObjectMapper mapper = registry.get (ObjectMapper)


        path ("login/:app") {
            byMethod {
                post {
                        def app = pathTokens["app"]
                        def authResult = parse (Form).observe ()
                                .flatMap ({ Form form -> authService.authenticate (form.username, form.password) })
                                                     .flatMap ({ User user ->
                                                        Session session = new Session (
                                                        app,
                                                        user.userId,
                                                        1, /* Initialize readCount to 1 */
                                                        1, /* Initialize writeCount to 1*/
                                                        request.getRemoteAddress ().host,
                                                        1800 * 1000, /*TTL is in milliseconds */
                                                        System.currentTimeMillis (), /*Initialize last_access to current timestamp */
                                                        null, /*token will be generated by SessionService */
                                                        [:] /* Extra data is an empty map initially */
                                                        )

                                                        return sessionService.create (session)
                                                     })

                        RxRatpack.promiseSingle (authResult).then { String result ->
                            response.cookie ("X-Auth-Token", result)
                            response.send ("OK")
                        }

                }
            }
        }

        path ("session/:app") {
            byMethod {
                get {
                    def app = pathTokens["app"]
                    def cookie = request.cookies.find { it.name () == 'X-Auth-Token' }
                    if (!cookie) {
                        response.status (Status.of (401))
                        response.send ("Session requires Token")
                    } else {
                        def sessionResult = sessionService.get (app, cookie.value ())
                        RxRatpack.promiseSingle (sessionResult).then { session ->
                            if (session) {
                                response.status (Status.of (200))
                                render (json (session))
                            } else {
                                response.status (Status.of (404))
                                response.send ()
                            }

                        }
                    }
                }
            }
        }

        path ("logout/:app") {
            byMethod {
                get {
                    def app = pathTokens["app"]
                    def user = pathTokens ["user"]
                    def cookie = request.cookies.find { it.name () == 'X-Auth-Token' }
                    if (!cookie) {
                        response.status (Status.of (400))
                        response.send ("Logout requires Token")
                    } else {

                        def logoutResult = sessionService.kill (app, cookie.value ())
                        RxRatpack.promiseSingle (logoutResult)
                                 .then (
                                { Long result ->
                                    response.expireCookie ("X-Auth-Token")
                                    response.status (Status.of (204))
                                    response.send ()
                                })
                    }

                }
            }
        }

    }
}
